// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main Page matchs snapshoot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body
    class="chakra-ui-light"
  >
    <div>
      <article>
        <section
          class="storybook-page"
        >
          <h2>
            Pages in Storybook
          </h2>
          <p>
            We recommend building UIs with a
             
            <a
              href="https://componentdriven.org"
              rel="noopener noreferrer"
              target="_blank"
            >
              <strong>
                component-driven
              </strong>
            </a>
             
            process starting with atomic components and ending with pages.
          </p>
          <p>
            Render pages with mock data. This makes it easy to build and review page states without needing to navigate to them in your app. Here are some handy patterns for managing page data in Storybook:
          </p>
          <ul>
            <li>
              Use a higher-level connected component. Storybook helps you compose such data from the "args" of child component stories
            </li>
            <li>
              Assemble data in the page component from your services. You can mock these services out using Storybook.
            </li>
          </ul>
          <p>
            Get a guided tutorial on component-driven development at
             
            <a
              href="https://storybook.js.org/tutorials/"
              rel="noopener noreferrer"
              target="_blank"
            >
              Storybook tutorials
            </a>
            . Read more in the
             
            <a
              href="https://storybook.js.org/docs"
              rel="noopener noreferrer"
              target="_blank"
            >
              docs
            </a>
            .
          </p>
          <div
            class="tip-wrapper"
          >
            <span
              class="tip"
            >
              Tip
            </span>
             Adjust the width of the canvas with the
             
            <svg
              height="10"
              viewBox="0 0 12 12"
              width="10"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g
                fill="none"
                fill-rule="evenodd"
              >
                <path
                  d="M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z"
                  fill="#999"
                  id="a"
                />
              </g>
            </svg>
            Viewports addon in the toolbar
          </div>
        </section>
      </article>
      <span
        hidden=""
        id="__chakra_env"
      />
    </div>
    <div
      class="chakra-portal"
    >
      <div
        aria-label="Notifications-top"
        aria-live="polite"
        id="chakra-toast-manager-top"
        role="region"
        style="position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;"
      />
      <div
        aria-label="Notifications-top-left"
        aria-live="polite"
        id="chakra-toast-manager-top-left"
        role="region"
        style="position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column;"
      />
      <div
        aria-label="Notifications-top-right"
        aria-live="polite"
        id="chakra-toast-manager-top-right"
        role="region"
        style="position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column;"
      />
      <div
        aria-label="Notifications-bottom-left"
        aria-live="polite"
        id="chakra-toast-manager-bottom-left"
        role="region"
        style="position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column;"
      />
      <div
        aria-label="Notifications-bottom"
        aria-live="polite"
        id="chakra-toast-manager-bottom"
        role="region"
        style="position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;"
      />
      <div
        aria-label="Notifications-bottom-right"
        aria-live="polite"
        id="chakra-toast-manager-bottom-right"
        role="region"
        style="position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column;"
      />
    </div>
  </body>,
  "container": <div>
    <article>
      <section
        class="storybook-page"
      >
        <h2>
          Pages in Storybook
        </h2>
        <p>
          We recommend building UIs with a
           
          <a
            href="https://componentdriven.org"
            rel="noopener noreferrer"
            target="_blank"
          >
            <strong>
              component-driven
            </strong>
          </a>
           
          process starting with atomic components and ending with pages.
        </p>
        <p>
          Render pages with mock data. This makes it easy to build and review page states without needing to navigate to them in your app. Here are some handy patterns for managing page data in Storybook:
        </p>
        <ul>
          <li>
            Use a higher-level connected component. Storybook helps you compose such data from the "args" of child component stories
          </li>
          <li>
            Assemble data in the page component from your services. You can mock these services out using Storybook.
          </li>
        </ul>
        <p>
          Get a guided tutorial on component-driven development at
           
          <a
            href="https://storybook.js.org/tutorials/"
            rel="noopener noreferrer"
            target="_blank"
          >
            Storybook tutorials
          </a>
          . Read more in the
           
          <a
            href="https://storybook.js.org/docs"
            rel="noopener noreferrer"
            target="_blank"
          >
            docs
          </a>
          .
        </p>
        <div
          class="tip-wrapper"
        >
          <span
            class="tip"
          >
            Tip
          </span>
           Adjust the width of the canvas with the
           
          <svg
            height="10"
            viewBox="0 0 12 12"
            width="10"
            xmlns="http://www.w3.org/2000/svg"
          >
            <g
              fill="none"
              fill-rule="evenodd"
            >
              <path
                d="M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z"
                fill="#999"
                id="a"
              />
            </g>
          </svg>
          Viewports addon in the toolbar
        </div>
      </section>
    </article>
    <span
      hidden=""
      id="__chakra_env"
    />
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
